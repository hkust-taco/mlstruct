class Some[A]: { value: A }
class None: {}
//│ Defined class Some[+A]
//│ Defined class None



def flatMap3 = fun f -> fun opt -> case opt of { Some -> f opt | _ -> opt }
//│ flatMap3: ('a -> 'b) -> (Some[?] & 'a | 'b & ~#Some) -> 'b
//│         = [Function: flatMap3]


def arg = if true then Some{value = 42} else None {}
//│ arg: None | Some[42]
//│    = Some { value: 42 }

:e
:stats
flatMap3 (fun x -> add x.value x.payload) arg
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.19: 	flatMap3 (fun x -> add x.value x.payload) arg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Some[?A] & {Some#A = ?A, value: ?value}` does not have field 'payload'
//│ ║  l.13: 	def arg = if true then Some{value = 42} else None {}
//│ ║        	                       ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{payload: ?payload}`
//│ ║  l.19: 	flatMap3 (fun x -> add x.value x.payload) arg
//│ ║        	                                          ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.19: 	flatMap3 (fun x -> add x.value x.payload) arg
//│ ║        	                               ^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.8: 	def flatMap3 = fun f -> fun opt -> case opt of { Some -> f opt | _ -> opt }
//│ ╙──     	                                        ^^^
//│ res: None | error | int
//│    = NaN
//│ constrain calls  : 97
//│ annoying  calls  : 33
//│ subtyping calls  : 86


def arg = if true then Some{value = 42} else None {}
//│ arg: None | Some[42]
//│    = Some { value: 42 }

flatMap3 (fun x -> x.value) arg
//│ res: 42 | None
//│    = 42


def foo = flatMap3 (fun x -> x.value)
//│ foo: (Some[?] & {value: 'a} | 'a & ~#Some) -> 'a
//│    = [Function (anonymous)]

foo arg
//│ res: 42 | None
//│    = 42

foo 1
//│ res: 1
//│    = 1

:e
def fn = foo None
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.64: 	def fn = foo None
//│ ║        	         ^^^^^^^^
//│ ╟── reference of type `anything -> None` does not match type `Some[?a] & ?b | ?c & ~#Some`
//│ ║  l.64: 	def fn = foo None
//│ ║        	             ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.8: 	def flatMap3 = fun f -> fun opt -> case opt of { Some -> f opt | _ -> opt }
//│ ║       	                                        ^^^
//│ ╟── Note: class constructor None is defined at:
//│ ║  l.2: 	class None: {}
//│ ╙──     	      ^^^^
//│ fn: error | anything -> None & ~#Some | anything -> None & ~{Some#A} | anything -> None & ~{value: 'a} | anything -> None & ~{value: anything} | 'a
//│   = [Function (anonymous)]

// :d
fn{} // foo None {}
//│ res: None | error
//│    = None {}

// :d
foo (None{})
//│ res: None
//│    = None {}


fun f -> flatMap3 f arg
//│ res: (Some[42] -> 'a) -> (None | 'a)
//│    = [Function: res]




def foo = flatMap3 (fun x -> x)
//│ foo: ('a & (Some[?] | ~#Some)) -> 'a
//│    = [Function (anonymous)]

foo 1
//│ res: 1
//│    = 1




def simpler = fun f -> case None{} of { Some -> f 1 | _ -> None{} }
//│ simpler: (1 -> 'a) -> (None | 'a)
//│        = [Function: simpler]

def simpler = fun f -> fun opt -> case opt of { Some -> f opt | None -> opt }
//│ simpler: ('a -> 'b) -> (None & 'b | Some[?] & 'a) -> 'b
//│        = [Function: simpler1]

simpler (fun x -> x.value)
//│ res: (None & 'a | Some[?] & {value: 'a}) -> 'a
//│    = [Function (anonymous)]

:e
res 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.122: 	res 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `1` does not match type `None & ?a | Some[?b] & ?c`
//│ ║  l.122: 	res 1
//│ ║         	    ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.113: 	def simpler = fun f -> fun opt -> case opt of { Some -> f opt | None -> opt }
//│ ╙──       	                                       ^^^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression


def funny = fun f -> case f of { Some -> f f }
//│ funny: (Some[?] & 'a -> 'b & 'a) -> 'b
//│      = [Function: funny]
