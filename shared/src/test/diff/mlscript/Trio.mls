
class A: { fA: int }
class B: { fB: string }
class C: { fC: bool }
//│ Defined class A
//│ Defined class B
//│ Defined class C

def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
//│ foo: (A & {fA: 'fA} | B & {fB: 'fA} | C & {fC: 'fA}) -> 'fA
//│    = [Function: foo]


b = B { fB = "test" }
//│ b: B & {fB: "test"}
//│  = B { fB: 'test' }

:stats
foo b
//│ res: "test"
//│    = 'test'
//│ constrain calls  : 26
//│ annoying  calls  : 15
//│ subtyping calls  : 71


def arg: A | B | C
//│ arg: A | B | C
//│    = <missing implementation>

:stats
foo arg
//│ res: bool | int | string
//│    = <no result>
//│      arg is not implemented
//│ constrain calls  : 47
//│ annoying  calls  : 45
//│ subtyping calls  : 222

def foo x = case x of {
  | A -> add x.fA x.payload
  | B -> x.fB
  | C -> { l = x.fC; r = x.payload }
  }
//│ foo: (A & {payload: int} | B & {fB: 'fB} | C & {fC: 'fC, payload: 'payload}) -> (int | 'fB | {l: 'fC, r: 'payload})
//│    = [Function: foo1]

:e
:stats
foo arg
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.54: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── type `A` does not have field 'payload'
//│ ║  l.31: 	def arg: A | B | C
//│ ║        	         ^
//│ ╟── but it flows into reference with expected type `{payload: ?payload}`
//│ ║  l.54: 	foo arg
//│ ║        	    ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.45: 	  | A -> add x.fA x.payload
//│ ║        	                  ^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.44: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int | string | {l: bool, r: nothing}
//│    = <no result>
//│      arg is not implemented
//│ constrain calls  : 59
//│ annoying  calls  : 55
//│ subtyping calls  : 252

