:NoJS

trait A[T]: { fA: T }
trait B[T]: { fB: T }
trait C[T]: { fC: T }
trait D[T]: { fD: T }
trait E[T]: { fE: T }
trait F[T]: { fF: T }
trait G[T]: { fG: T }
trait H[T]: { fH: T }
//│ Defined trait A[+T]
//│ Defined trait B[+T]
//│ Defined trait C[+T]
//│ Defined trait D[+T]
//│ Defined trait E[+T]
//│ Defined trait F[+T]
//│ Defined trait G[+T]
//│ Defined trait H[+T]

:stats
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | ~#F & ({fG: 'fA} & #G | {fH: 'fA} & #H & ~#G))))))) -> 'fA
//│ constrain calls  : 26
//│ annoying  calls  : 0
//│ subtyping calls  : 558


// ====== 1 & all ====== //

:stats
def arg: A[int]
foo arg
//│ arg: A[int]
//│ res: int
//│ constrain calls  : 19
//│ annoying  calls  : 9
//│ subtyping calls  : 648

:stats
:e
def arg: A[int] | B[int]
foo arg
//│ arg: A[int] | B[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.51: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.22: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.21: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int
//│ constrain calls  : 43
//│ annoying  calls  : 32
//│ subtyping calls  : 1427

:stats
:e
def arg: A[int] | B[int] | C[int]
foo arg
//│ arg: A[int] | B[int] | C[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.71: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.22: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.21: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error | int
//│ constrain calls  : 96
//│ annoying  calls  : 96
//│ subtyping calls  : 3376

:stats
:e
def arg: A[int] | B[int] | D[int]
foo arg
//│ arg: A[int] | B[int] | D[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.91: 	foo arg
//│ ║        	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.22: 	  | A -> x.fA
//│ ║        	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.21: 	def foo x = case x of {
//│ ╙──      	                 ^
//│ res: error
//│ constrain calls  : 131
//│ annoying  calls  : 219
//│ subtyping calls  : 13212


// ====== 2 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  }
def arg: A[int] | B[int]
foo arg
//│ foo: ({fA: 'fA} & #A | {fB: 'fA} & #B & ~#A) -> 'fA
//│ arg: A[int] | B[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.118: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.114: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.113: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error | int
//│ constrain calls  : 51
//│ annoying  calls  : 32
//│ subtyping calls  : 201


// ====== 3 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  }
def arg: A[int] | B[int] | C[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | {fC: 'fA} & #C & ~#B)) -> 'fA
//│ arg: A[int] | B[int] | C[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.147: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.142: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.141: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error | int
//│ constrain calls  : 107
//│ annoying  calls  : 96
//│ subtyping calls  : 1624


// ====== 4 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  }
def arg: A[int] | B[int] | C[int] | D[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | {fD: 'fA} & #D & ~#C))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.177: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.171: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.170: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 126
//│ annoying  calls  : 133
//│ subtyping calls  : 2270


// ====== 5 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | {fE: 'fA} & #E & ~#D)))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.208: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.201: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.200: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 130
//│ annoying  calls  : 133
//│ subtyping calls  : 2679


// ====== 6 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | {fF: 'fA} & #F & ~#E))))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.240: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.232: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.231: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 134
//│ annoying  calls  : 133
//│ subtyping calls  : 3273


// ====== 7 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | {fG: 'fA} & #G & ~#F)))))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.273: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.264: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.263: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 138
//│ annoying  calls  : 133
//│ subtyping calls  : 4085

def foo_manual: ({fA: 'a} & #A | {fB: 'a} & #B & ~#A | {fC: 'a} & #C & ~#A & ~#B | {fD: 'a} & #D & ~#A & ~#B & ~#C | {fE: 'a} & #E & ~#A & ~#B & ~#C & ~#D | {fF: 'a} & #F & ~#A & ~#B & ~#C & ~#D & ~#E | {fG: 'a} & #G & ~#A & ~#B & ~#C & ~#D & ~#E & ~#F) -> 'a
//│ foo_manual: ({fA: 'a} & #A | ~#A & ({fB: 'a} & #B | ~#B & ({fC: 'a} & #C | ~#C & ({fD: 'a} & #D | ~#D & ({fE: 'a} & #E | ~#E & ({fF: 'a} & #F | {fG: 'a} & #G & ~#F)))))) -> 'a

:stats
:e
foo_manual arg
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.296: 	foo_manual arg
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type `{B#T <: int, fB: int} & #B` does not match type `{fA: ?a} & #A | ~#A & ({fB: ?a} & #B | ~#B & ({fC: ?a} & #C | ~#C & ({fD: ?a} & #D | ~#D & ({fE: ?a} & #E | ~#E & ({fF: ?a} & #F | {fG: ?a} & #G & ~#F)))))`
//│ ║  l.272: 	def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int]
//│ ║         	                  ^^^^^^
//│ ╟── but it flows into reference with expected type `{fA: ?a0} & #A | ~#A & ({fB: ?a0} & #B | ~#B & ({fC: ?a0} & #C | ~#C & ({fD: ?a0} & #D | ~#D & ({fE: ?a0} & #E | ~#E & ({fF: ?a0} & #F | {fG: ?a0} & #G & ~#F)))))`
//│ ║  l.296: 	foo_manual arg
//│ ║         	           ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.291: 	def foo_manual: ({fA: 'a} & #A | {fB: 'a} & #B & ~#A | {fC: 'a} & #C & ~#A & ~#B | {fD: 'a} & #D & ~#A & ~#B & ~#C | {fE: 'a} & #E & ~#A & ~#B & ~#C & ~#D | {fF: 'a} & #F & ~#A & ~#B & ~#C & ~#D & ~#E | {fG: 'a} & #G & ~#A & ~#B & ~#C & ~#D & ~#E & ~#F) -> 'a
//│ ╙──       	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error
//│ constrain calls  : 25
//│ annoying  calls  : 67
//│ subtyping calls  : 4984

:stats
foo_manual = foo
//│ ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | {fG: 'fA} & #G & ~#F)))))) -> 'fA
//│   <:  foo_manual:
//│ ({fA: 'a} & #A | ~#A & ({fB: 'a} & #B | ~#B & ({fC: 'a} & #C | ~#C & ({fD: 'a} & #D | ~#D & ({fE: 'a} & #E | ~#E & ({fF: 'a} & #F | {fG: 'a} & #G & ~#F)))))) -> 'a
//│ constrain calls  : 102
//│ annoying  calls  : 183
//│ subtyping calls  : 4348


// ====== 8 ====== //

:stats
:e
def foo x = case x of {
  | A -> x.fA
  | B -> x.fB
  | C -> x.fC
  | D -> x.fD
  | E -> x.fE
  | F -> x.fF
  | G -> x.fG
  | H -> x.fH
  }
def arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
foo arg
//│ foo: ({fA: 'fA} & #A | ~#A & ({fB: 'fA} & #B | ~#B & ({fC: 'fA} & #C | ~#C & ({fD: 'fA} & #D | ~#D & ({fE: 'fA} & #E | ~#E & ({fF: 'fA} & #F | ~#F & ({fG: 'fA} & #G | {fH: 'fA} & #H & ~#G))))))) -> 'fA
//│ arg: A[int] | B[int] | C[int] | D[int] | E[int] | F[int] | G[int] | H[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.339: 	foo arg
//│ ║         	^^^^^^^
//│ ╟── expression of type `#B & ({B#T <: int, fB: int} & #A | {B#T <: int, fB: int} & ~?a)` does not have field 'fA'
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.329: 	  | A -> x.fA
//│ ║         	         ^^^^
//│ ╟── from refined scrutinee:
//│ ║  l.328: 	def foo x = case x of {
//│ ╙──       	                 ^
//│ res: error
//│ constrain calls  : 142
//│ annoying  calls  : 133
//│ subtyping calls  : 5148


