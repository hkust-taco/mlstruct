
class Parent: { name: string }
//│ Defined class Parent

class Child: Parent & { age: int }
//│ Defined class Child

def p = Parent{ name = "Bob" }
//│ p: Parent & {name: "Bob"}
//│  = Parent { name: 'Bob' }

p: Parent
//│ res: Parent
//│    = Parent { name: 'Bob' }

:e
def c = Child(Parent { name = "Bob" })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.17: 	def c = Child(Parent { name = "Bob" })
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Parent & {name: ?name}` is not a compatible record (expected a record with fields: name, age)
//│ ║  l.17: 	def c = Child(Parent { name = "Bob" })
//│ ╙──      	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ c: Child & {age: nothing, name: "Bob"} | error
//│  = Child { name: 'Bob', age: undefined }

c: Parent
//│ res: Parent
//│    = Child { name: 'Bob', age: undefined }

c.name
//│ res: "Bob" | error
//│    = 'Bob'

c: { name: 'a }
//│ res: {name: "Bob" | error}
//│    = Child { name: 'Bob', age: undefined }

c: { name: string }
//│ res: {name: string}
//│    = Child { name: 'Bob', age: undefined }


def f x = case x of {
  | Parent -> x.name
  }
//│ f: (Parent & {name: 'name}) -> 'name
//│  = [Function: f]

f c
//│ res: "Bob" | error
//│    = 'Bob'

f (c: Parent)
//│ res: string
//│    = 'Bob'


def f x = case x of {
  | Child -> x.name
  }
//│ f: (Child & {name: 'name}) -> 'name
//│  = [Function: f1]

f c
//│ res: "Bob" | error
//│    = 'Bob'

:e
f (c: Parent)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.70: 	f (c: Parent)
//│ ║        	^^^^^^^^^^^^^
//│ ╟── type `Parent` is not an instance of type `Child`
//│ ║  l.70: 	f (c: Parent)
//│ ║        	      ^^^^^^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.60: 	  | Child -> x.name
//│ ║        	    ^^^^^
//│ ╟── from reference:
//│ ║  l.59: 	def f x = case x of {
//│ ╙──      	               ^
//│ res: error | string
//│    = 'Bob'


def f x = case x of {
  | Parent -> x.name
  | _ -> ""
  }
//│ f: (Parent & {name: 'name} | ~#Parent) -> ("" | 'name)
//│  = [Function: f2]

f c
//│ res: "" | "Bob"
//│    = 'Bob'

f (c: Parent)
//│ res: string
//│    = 'Bob'


def f x = case x of {
  | Parent -> x.name
  | Child -> x.name
  }
//│ f: (Parent & {name: 'name}) -> 'name
//│  = [Function: f3]

f c
//│ res: "Bob"
//│    = 'Bob'

f (c: Parent)
//│ res: string
//│    = 'Bob'

