
class Test: { value: int }
//│ Defined class Test

def foo x = case x of
  { Test -> x.value
  | _ -> 1
  }
//│ foo: (Test & {value: 'value} | ~#Test) -> (1 | 'value)
//│    = [Function: foo]

// Q: why type of `value` widened?
def t = Test { value = 0 }
//│ t: Test & {value: 0}
//│  = Test { value: 0 }

:e
foo Test
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.18: 	foo Test
//│ ║        	^^^^^^^^
//│ ╟── reference of type `{value: ?value} -> (Test & {value: ?value})` does not match type `Test & ?a | ?b & ~#Test`
//│ ║  l.18: 	foo Test
//│ ║        	    ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.5: 	def foo x = case x of
//│ ║       	                 ^
//│ ╟── Note: class constructor Test is defined at:
//│ ║  l.2: 	class Test: { value: int }
//│ ╙──     	      ^^^^
//│ res: 1 | error
//│    = 1

foo t
//│ res: 0 | 1
//│    = 0


class Toast: { name: string }
//│ Defined class Toast

def bar x = case x of
  { Test -> x.value
  | Toast -> x.name
  }
//│ bar: (Test & {value: 'value} | Toast & {name: 'value}) -> 'value
//│    = [Function: bar]

:e
bar Test
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.50: 	bar Test
//│ ║        	^^^^^^^^
//│ ╟── reference of type `{value: ?value} -> (Test & {value: ?value})` does not match type `Test & ?a | Toast & ?b`
//│ ║  l.50: 	bar Test
//│ ║        	    ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.42: 	def bar x = case x of
//│ ║        	                 ^
//│ ╟── Note: class constructor Test is defined at:
//│ ║  l.2: 	class Test: { value: int }
//│ ╙──     	      ^^^^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression

:e
bar "ops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.68: 	bar "ops"
//│ ║        	^^^^^^^^^
//│ ╟── string literal of type `"ops"` does not match type `Test & ?a | Toast & ?b`
//│ ║  l.68: 	bar "ops"
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.42: 	def bar x = case x of
//│ ╙──      	                 ^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression


def baz x = case x of
  { Test -> x
  | Toast -> x
  }
//│ baz: ('a & (Test | Toast)) -> 'a
//│    = [Function: baz]

:e
baz "oops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.91: 	baz "oops"
//│ ║        	^^^^^^^^^^
//│ ╟── string literal of type `"oops"` does not match type `Test & ?a | Toast & ?b`
//│ ║  l.91: 	baz "oops"
//│ ║        	    ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.83: 	def baz x = case x of
//│ ╙──      	                 ^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression



def test3 x = case x of
  { 1 -> true
  | true -> true
  | _ -> false
  }
//│ test3: (1 | true | ~1 & ~true) -> bool
//│      = [Function: test3]

:ns
test3
//│ res: 'a -> (true | false)
//│   where
//│     'a <: 1 & 'b | (true & 'c | 'd & ~true) & ~1
//│    = [Function: test3]


def test3 x = case x of
  { 1 -> x
  | true -> true
  | _ -> false
  }
//│ test3: (1 & 'a | true | ~1 & ~true) -> (false | true | 'a)
//│      = [Function: test31]


